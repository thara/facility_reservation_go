// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AdminUsersCreate implements admin_users_create operation.
	//
	// Create a new user account. Admin access required.
	//
	// POST /api/v1/admin/users/
	AdminUsersCreate(ctx context.Context, req *AdminUser) (AdminUsersCreateRes, error)
	// AdminUsersDestroy implements admin_users_destroy operation.
	//
	// Delete the user with the given ID. Admin access required.
	//
	// DELETE /api/v1/admin/users/{id}/
	AdminUsersDestroy(ctx context.Context, params AdminUsersDestroyParams) (AdminUsersDestroyRes, error)
	// AdminUsersList implements admin_users_list operation.
	//
	// Retrieves a list of all registered users. Admin access required.
	//
	// GET /api/v1/admin/users/
	AdminUsersList(ctx context.Context) (AdminUsersListRes, error)
	// AdminUsersRetrieve implements admin_users_retrieve operation.
	//
	// Fetch details of a specific user by ID. Admin access required.
	//
	// GET /api/v1/admin/users/{id}/
	AdminUsersRetrieve(ctx context.Context, params AdminUsersRetrieveParams) (AdminUsersRetrieveRes, error)
	// AdminUsersUpdate implements admin_users_update operation.
	//
	// Update an existing user's full data by ID. Admin access required.
	//
	// PUT /api/v1/admin/users/{id}/
	AdminUsersUpdate(ctx context.Context, req *AdminUser, params AdminUsersUpdateParams) (AdminUsersUpdateRes, error)
	// FacilitiesCreate implements facilities_create operation.
	//
	// Creates a new facility. Only administrators are authorized.
	//
	// POST /api/v1/facilities/
	FacilitiesCreate(ctx context.Context, req *PublicFacility) (FacilitiesCreateRes, error)
	// FacilitiesDestroy implements facilities_destroy operation.
	//
	// Deletes a facility. Only administrators are authorized.
	//
	// DELETE /api/v1/facilities/{id}/
	FacilitiesDestroy(ctx context.Context, params FacilitiesDestroyParams) (FacilitiesDestroyRes, error)
	// FacilitiesList implements facilities_list operation.
	//
	// Returns a list of all active facilities. No authentication required.
	//
	// GET /api/v1/facilities/
	FacilitiesList(ctx context.Context) ([]PublicFacility, error)
	// FacilitiesPartialUpdate implements facilities_partial_update operation.
	//
	// Updates select fields of a facility. Only administrators are authorized.
	//
	// PATCH /api/v1/facilities/{id}/
	FacilitiesPartialUpdate(ctx context.Context, req *PublicFacilityMergePatchUpdate, params FacilitiesPartialUpdateParams) (FacilitiesPartialUpdateRes, error)
	// FacilitiesRetrieve implements facilities_retrieve operation.
	//
	// Returns detailed information about a specific facility. No authentication required.
	//
	// GET /api/v1/facilities/{id}/
	FacilitiesRetrieve(ctx context.Context, params FacilitiesRetrieveParams) (FacilitiesRetrieveRes, error)
	// FacilitiesUpdate implements facilities_update operation.
	//
	// Updates an existing facility. Only administrators are authorized.
	//
	// PUT /api/v1/facilities/{id}/
	FacilitiesUpdate(ctx context.Context, req *PublicFacility, params FacilitiesUpdateParams) (FacilitiesUpdateRes, error)
	// MeRetrieve implements me_retrieve operation.
	//
	// Returns basic profile information of the currently authenticated user.
	//
	// GET /api/v1/me/
	MeRetrieve(ctx context.Context) (MeRetrieveRes, error)
	// NewError creates *UnexpectedErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *UnexpectedErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
