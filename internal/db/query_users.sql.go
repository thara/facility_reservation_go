// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query_users.sql

package db

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :one
INSERT INTO user_tokens (id, user_id, token, name, expires_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, token, name, expires_at, created_at
`

type CreateTokenParams struct {
	ID        uuid.UUID          `json:"id"`
	UserID    uuid.UUID          `json:"user_id"`
	Token     string             `json:"token"`
	Name      string             `json:"name"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (UserToken, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.Name,
		arg.ExpiresAt,
	)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Name,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, is_staff)
VALUES ($1, $2, $3)
RETURNING id, username, is_staff, created_at
`

type CreateUserParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	IsStaff  bool      `json:"is_staff"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Username, arg.IsStaff)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsStaff,
		&i.CreatedAt,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM user_tokens
WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteToken, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, is_staff, created_at
FROM users 
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsStaff,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one

SELECT u.id, u.username, u.is_staff
FROM users u
JOIN user_tokens t ON u.id = t.user_id
WHERE t.token = $1 
  AND (t.expires_at IS NULL OR t.expires_at > NOW())
`

type GetUserByTokenRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	IsStaff  bool      `json:"is_staff"`
}

// Users queries for Phase 1 token-based authentication
func (q *Queries) GetUserByToken(ctx context.Context, token string) (GetUserByTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserByToken, token)
	var i GetUserByTokenRow
	err := row.Scan(&i.ID, &i.Username, &i.IsStaff)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, is_staff, created_at
FROM users 
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsStaff,
		&i.CreatedAt,
	)
	return i, err
}

const listUserTokens = `-- name: ListUserTokens :many
SELECT id, user_id, token, name, expires_at, created_at
FROM user_tokens
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUserTokens(ctx context.Context, userID uuid.UUID) ([]UserToken, error) {
	rows, err := q.db.Query(ctx, listUserTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserToken
	for rows.Next() {
		var i UserToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.Name,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, is_staff, created_at
FROM users
ORDER BY created_at
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.IsStaff,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
