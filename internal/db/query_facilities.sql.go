// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query_facilities.sql

package db

import (
	"context"
)

const createFacility = `-- name: CreateFacility :one
INSERT INTO facilities (name, description, location, priority, is_active)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, location, priority, is_active, created_at, updated_at
`

type CreateFacilityParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Location    *string `json:"location"`
	Priority    *int64  `json:"priority"`
	IsActive    bool    `json:"is_active"`
}

func (q *Queries) CreateFacility(ctx context.Context, db DBTX, arg CreateFacilityParams) (Facility, error) {
	row := db.QueryRow(ctx, createFacility,
		arg.Name,
		arg.Description,
		arg.Location,
		arg.Priority,
		arg.IsActive,
	)
	var i Facility
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.Priority,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFacility = `-- name: DeleteFacility :exec
DELETE FROM facilities
WHERE id = $1
`

func (q *Queries) DeleteFacility(ctx context.Context, db DBTX, id int32) error {
	_, err := db.Exec(ctx, deleteFacility, id)
	return err
}

const getFacilityByID = `-- name: GetFacilityByID :one
SELECT id, name, description, location, priority, is_active, created_at, updated_at
FROM facilities
WHERE id = $1
`

func (q *Queries) GetFacilityByID(ctx context.Context, db DBTX, id int32) (Facility, error) {
	row := db.QueryRow(ctx, getFacilityByID, id)
	var i Facility
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.Priority,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllFacilities = `-- name: ListAllFacilities :many
SELECT id, name, description, location, priority, is_active, created_at, updated_at
FROM facilities
ORDER BY priority ASC, name ASC
`

func (q *Queries) ListAllFacilities(ctx context.Context, db DBTX) ([]Facility, error) {
	rows, err := db.Query(ctx, listAllFacilities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Facility
	for rows.Next() {
		var i Facility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Location,
			&i.Priority,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFacilities = `-- name: ListFacilities :many

SELECT id, name, description, location, priority, is_active, created_at, updated_at
FROM facilities
WHERE is_active = true
ORDER BY priority ASC, name ASC
`

// Facilities queries for public and admin operations
func (q *Queries) ListFacilities(ctx context.Context, db DBTX) ([]Facility, error) {
	rows, err := db.Query(ctx, listFacilities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Facility
	for rows.Next() {
		var i Facility
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Location,
			&i.Priority,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFacility = `-- name: UpdateFacility :one
UPDATE facilities
SET name = $2,
    description = $3,
    location = $4,
    priority = $5,
    is_active = $6,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, location, priority, is_active, created_at, updated_at
`

type UpdateFacilityParams struct {
	ID          int32   `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Location    *string `json:"location"`
	Priority    *int64  `json:"priority"`
	IsActive    bool    `json:"is_active"`
}

func (q *Queries) UpdateFacility(ctx context.Context, db DBTX, arg UpdateFacilityParams) (Facility, error) {
	row := db.QueryRow(ctx, updateFacility,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Location,
		arg.Priority,
		arg.IsActive,
	)
	var i Facility
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.Priority,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFacilityPartial = `-- name: UpdateFacilityPartial :one
UPDATE facilities
SET name = COALESCE($1, name),
    description = COALESCE($2, description),
    location = COALESCE($3, location),
    priority = COALESCE($4, priority),
    is_active = COALESCE($5, is_active),
    updated_at = NOW()
WHERE id = $6
RETURNING id, name, description, location, priority, is_active, created_at, updated_at
`

type UpdateFacilityPartialParams struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Location    *string `json:"location"`
	Priority    *int64  `json:"priority"`
	IsActive    *bool   `json:"is_active"`
	ID          int32   `json:"id"`
}

func (q *Queries) UpdateFacilityPartial(ctx context.Context, db DBTX, arg UpdateFacilityPartialParams) (Facility, error) {
	row := db.QueryRow(ctx, updateFacilityPartial,
		arg.Name,
		arg.Description,
		arg.Location,
		arg.Priority,
		arg.IsActive,
		arg.ID,
	)
	var i Facility
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Location,
		&i.Priority,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
