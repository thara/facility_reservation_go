// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query_users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, is_staff, password_hash)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, is_staff, created_at, updated_at
`

type CreateUserParams struct {
	Username     string  `json:"username"`
	Email        *string `json:"email"`
	IsStaff      bool    `json:"is_staff"`
	PasswordHash string  `json:"password_hash"`
}

type CreateUserRow struct {
	ID        int32     `json:"id"`
	Username  string    `json:"username"`
	Email     *string   `json:"email"`
	IsStaff   bool      `json:"is_staff"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (CreateUserRow, error) {
	row := db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.IsStaff,
		arg.PasswordHash,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsStaff,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, db DBTX, id int32) error {
	_, err := db.Exec(ctx, deleteUser, id)
	return err
}

const getCurrentUser = `-- name: GetCurrentUser :one
SELECT id, username, email
FROM users
WHERE id = $1
`

type GetCurrentUserRow struct {
	ID       int32   `json:"id"`
	Username string  `json:"username"`
	Email    *string `json:"email"`
}

func (q *Queries) GetCurrentUser(ctx context.Context, db DBTX, id int32) (GetCurrentUserRow, error) {
	row := db.QueryRow(ctx, getCurrentUser, id)
	var i GetCurrentUserRow
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, username, email, is_staff, created_at, updated_at
FROM users 
WHERE id = $1
`

type GetUserByIDRow struct {
	ID        int32     `json:"id"`
	Username  string    `json:"username"`
	Email     *string   `json:"email"`
	IsStaff   bool      `json:"is_staff"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Users queries for admin and authentication operations
func (q *Queries) GetUserByID(ctx context.Context, db DBTX, id int32) (GetUserByIDRow, error) {
	row := db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsStaff,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, is_staff, password_hash, created_at, updated_at
FROM users 
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, db DBTX, username string) (User, error) {
	row := db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsStaff,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, is_staff, created_at, updated_at
FROM users
ORDER BY id
`

type ListUsersRow struct {
	ID        int32     `json:"id"`
	Username  string    `json:"username"`
	Email     *string   `json:"email"`
	IsStaff   bool      `json:"is_staff"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ListUsers(ctx context.Context, db DBTX) ([]ListUsersRow, error) {
	rows, err := db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.IsStaff,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2,
    email = $3,
    is_staff = $4
WHERE id = $1
RETURNING id, username, email, is_staff, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int32   `json:"id"`
	Username string  `json:"username"`
	Email    *string `json:"email"`
	IsStaff  bool    `json:"is_staff"`
}

type UpdateUserRow struct {
	ID        int32     `json:"id"`
	Username  string    `json:"username"`
	Email     *string   `json:"email"`
	IsStaff   bool      `json:"is_staff"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) (UpdateUserRow, error) {
	row := db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.IsStaff,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsStaff,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, db DBTX, arg UpdateUserPasswordParams) error {
	_, err := db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
