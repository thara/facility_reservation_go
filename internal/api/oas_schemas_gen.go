// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/url"
	"time"

	"github.com/go-faster/errors"
)

func (s *UnexpectedErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Serializer for admin-level access to user objects, including staff status and hyperlinked
// self-reference.
// Ref: #/components/schemas/AdminUser
type AdminUser struct {
	ID  int     `json:"id"`
	URL url.URL `json:"url"`
	// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string         `json:"username"`
	Email    OptEmailString `json:"email"`
	// Designates whether the user can log into this admin site.
	IsStaff OptBool `json:"is_staff"`
}

// GetID returns the value of ID.
func (s *AdminUser) GetID() int {
	return s.ID
}

// GetURL returns the value of URL.
func (s *AdminUser) GetURL() url.URL {
	return s.URL
}

// GetUsername returns the value of Username.
func (s *AdminUser) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *AdminUser) GetEmail() OptEmailString {
	return s.Email
}

// GetIsStaff returns the value of IsStaff.
func (s *AdminUser) GetIsStaff() OptBool {
	return s.IsStaff
}

// SetID sets the value of ID.
func (s *AdminUser) SetID(val int) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *AdminUser) SetURL(val url.URL) {
	s.URL = val
}

// SetUsername sets the value of Username.
func (s *AdminUser) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *AdminUser) SetEmail(val OptEmailString) {
	s.Email = val
}

// SetIsStaff sets the value of IsStaff.
func (s *AdminUser) SetIsStaff(val OptBool) {
	s.IsStaff = val
}

func (*AdminUser) adminUsersCreateRes()        {}
func (*AdminUser) adminUsersPartialUpdateRes() {}
func (*AdminUser) adminUsersRetrieveRes()      {}
func (*AdminUser) adminUsersUpdateRes()        {}

// Ref: #/components/schemas/AdminUserMergePatchUpdate
type AdminUserMergePatchUpdate struct {
	// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username OptString                         `json:"username"`
	Email    OptAdminUserMergePatchUpdateEmail `json:"email"`
	// Designates whether the user can log into this admin site.
	IsStaff OptAdminUserMergePatchUpdateIsStaff `json:"is_staff"`
}

// GetUsername returns the value of Username.
func (s *AdminUserMergePatchUpdate) GetUsername() OptString {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *AdminUserMergePatchUpdate) GetEmail() OptAdminUserMergePatchUpdateEmail {
	return s.Email
}

// GetIsStaff returns the value of IsStaff.
func (s *AdminUserMergePatchUpdate) GetIsStaff() OptAdminUserMergePatchUpdateIsStaff {
	return s.IsStaff
}

// SetUsername sets the value of Username.
func (s *AdminUserMergePatchUpdate) SetUsername(val OptString) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *AdminUserMergePatchUpdate) SetEmail(val OptAdminUserMergePatchUpdateEmail) {
	s.Email = val
}

// SetIsStaff sets the value of IsStaff.
func (s *AdminUserMergePatchUpdate) SetIsStaff(val OptAdminUserMergePatchUpdateIsStaff) {
	s.IsStaff = val
}

// AdminUserMergePatchUpdateEmail represents sum type.
type AdminUserMergePatchUpdateEmail struct {
	Type        AdminUserMergePatchUpdateEmailType // switch on this field
	EmailString EmailString
	Null        struct{}
}

// AdminUserMergePatchUpdateEmailType is oneOf type of AdminUserMergePatchUpdateEmail.
type AdminUserMergePatchUpdateEmailType string

// Possible values for AdminUserMergePatchUpdateEmailType.
const (
	EmailStringAdminUserMergePatchUpdateEmail AdminUserMergePatchUpdateEmailType = "EmailString"
	NullAdminUserMergePatchUpdateEmail        AdminUserMergePatchUpdateEmailType = "struct{}"
)

// IsEmailString reports whether AdminUserMergePatchUpdateEmail is EmailString.
func (s AdminUserMergePatchUpdateEmail) IsEmailString() bool {
	return s.Type == EmailStringAdminUserMergePatchUpdateEmail
}

// IsNull reports whether AdminUserMergePatchUpdateEmail is struct{}.
func (s AdminUserMergePatchUpdateEmail) IsNull() bool {
	return s.Type == NullAdminUserMergePatchUpdateEmail
}

// SetEmailString sets AdminUserMergePatchUpdateEmail to EmailString.
func (s *AdminUserMergePatchUpdateEmail) SetEmailString(v EmailString) {
	s.Type = EmailStringAdminUserMergePatchUpdateEmail
	s.EmailString = v
}

// GetEmailString returns EmailString and true boolean if AdminUserMergePatchUpdateEmail is EmailString.
func (s AdminUserMergePatchUpdateEmail) GetEmailString() (v EmailString, ok bool) {
	if !s.IsEmailString() {
		return v, false
	}
	return s.EmailString, true
}

// NewEmailStringAdminUserMergePatchUpdateEmail returns new AdminUserMergePatchUpdateEmail from EmailString.
func NewEmailStringAdminUserMergePatchUpdateEmail(v EmailString) AdminUserMergePatchUpdateEmail {
	var s AdminUserMergePatchUpdateEmail
	s.SetEmailString(v)
	return s
}

// SetNull sets AdminUserMergePatchUpdateEmail to struct{}.
func (s *AdminUserMergePatchUpdateEmail) SetNull(v struct{}) {
	s.Type = NullAdminUserMergePatchUpdateEmail
	s.Null = v
}

// GetNull returns struct{} and true boolean if AdminUserMergePatchUpdateEmail is struct{}.
func (s AdminUserMergePatchUpdateEmail) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullAdminUserMergePatchUpdateEmail returns new AdminUserMergePatchUpdateEmail from struct{}.
func NewNullAdminUserMergePatchUpdateEmail(v struct{}) AdminUserMergePatchUpdateEmail {
	var s AdminUserMergePatchUpdateEmail
	s.SetNull(v)
	return s
}

// Designates whether the user can log into this admin site.
// AdminUserMergePatchUpdateIsStaff represents sum type.
type AdminUserMergePatchUpdateIsStaff struct {
	Type AdminUserMergePatchUpdateIsStaffType // switch on this field
	Bool bool
	Null struct{}
}

// AdminUserMergePatchUpdateIsStaffType is oneOf type of AdminUserMergePatchUpdateIsStaff.
type AdminUserMergePatchUpdateIsStaffType string

// Possible values for AdminUserMergePatchUpdateIsStaffType.
const (
	BoolAdminUserMergePatchUpdateIsStaff AdminUserMergePatchUpdateIsStaffType = "bool"
	NullAdminUserMergePatchUpdateIsStaff AdminUserMergePatchUpdateIsStaffType = "struct{}"
)

// IsBool reports whether AdminUserMergePatchUpdateIsStaff is bool.
func (s AdminUserMergePatchUpdateIsStaff) IsBool() bool {
	return s.Type == BoolAdminUserMergePatchUpdateIsStaff
}

// IsNull reports whether AdminUserMergePatchUpdateIsStaff is struct{}.
func (s AdminUserMergePatchUpdateIsStaff) IsNull() bool {
	return s.Type == NullAdminUserMergePatchUpdateIsStaff
}

// SetBool sets AdminUserMergePatchUpdateIsStaff to bool.
func (s *AdminUserMergePatchUpdateIsStaff) SetBool(v bool) {
	s.Type = BoolAdminUserMergePatchUpdateIsStaff
	s.Bool = v
}

// GetBool returns bool and true boolean if AdminUserMergePatchUpdateIsStaff is bool.
func (s AdminUserMergePatchUpdateIsStaff) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolAdminUserMergePatchUpdateIsStaff returns new AdminUserMergePatchUpdateIsStaff from bool.
func NewBoolAdminUserMergePatchUpdateIsStaff(v bool) AdminUserMergePatchUpdateIsStaff {
	var s AdminUserMergePatchUpdateIsStaff
	s.SetBool(v)
	return s
}

// SetNull sets AdminUserMergePatchUpdateIsStaff to struct{}.
func (s *AdminUserMergePatchUpdateIsStaff) SetNull(v struct{}) {
	s.Type = NullAdminUserMergePatchUpdateIsStaff
	s.Null = v
}

// GetNull returns struct{} and true boolean if AdminUserMergePatchUpdateIsStaff is struct{}.
func (s AdminUserMergePatchUpdateIsStaff) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullAdminUserMergePatchUpdateIsStaff returns new AdminUserMergePatchUpdateIsStaff from struct{}.
func NewNullAdminUserMergePatchUpdateIsStaff(v struct{}) AdminUserMergePatchUpdateIsStaff {
	var s AdminUserMergePatchUpdateIsStaff
	s.SetNull(v)
	return s
}

type AdminUsersCreateBadRequest ProblemDetails

func (*AdminUsersCreateBadRequest) adminUsersCreateRes() {}

type AdminUsersCreateNotFound ProblemDetails

func (*AdminUsersCreateNotFound) adminUsersCreateRes() {}

type AdminUsersDestroyBadRequest ProblemDetails

func (*AdminUsersDestroyBadRequest) adminUsersDestroyRes() {}

type AdminUsersDestroyForbidden ProblemDetails

func (*AdminUsersDestroyForbidden) adminUsersDestroyRes() {}

// AdminUsersDestroyNoContent is response for AdminUsersDestroy operation.
type AdminUsersDestroyNoContent struct{}

func (*AdminUsersDestroyNoContent) adminUsersDestroyRes() {}

type AdminUsersDestroyNotFound ProblemDetails

func (*AdminUsersDestroyNotFound) adminUsersDestroyRes() {}

type AdminUsersDestroyUnauthorized ProblemDetails

func (*AdminUsersDestroyUnauthorized) adminUsersDestroyRes() {}

type AdminUsersListForbidden ProblemDetails

func (*AdminUsersListForbidden) adminUsersListRes() {}

type AdminUsersListOKApplicationJSON []AdminUser

func (*AdminUsersListOKApplicationJSON) adminUsersListRes() {}

type AdminUsersListUnauthorized ProblemDetails

func (*AdminUsersListUnauthorized) adminUsersListRes() {}

type AdminUsersPartialUpdateBadRequest ProblemDetails

func (*AdminUsersPartialUpdateBadRequest) adminUsersPartialUpdateRes() {}

type AdminUsersPartialUpdateForbidden ProblemDetails

func (*AdminUsersPartialUpdateForbidden) adminUsersPartialUpdateRes() {}

type AdminUsersPartialUpdateNotFound ProblemDetails

func (*AdminUsersPartialUpdateNotFound) adminUsersPartialUpdateRes() {}

type AdminUsersPartialUpdateUnauthorized ProblemDetails

func (*AdminUsersPartialUpdateUnauthorized) adminUsersPartialUpdateRes() {}

type AdminUsersRetrieveForbidden ProblemDetails

func (*AdminUsersRetrieveForbidden) adminUsersRetrieveRes() {}

type AdminUsersRetrieveNotFound ProblemDetails

func (*AdminUsersRetrieveNotFound) adminUsersRetrieveRes() {}

type AdminUsersRetrieveUnauthorized ProblemDetails

func (*AdminUsersRetrieveUnauthorized) adminUsersRetrieveRes() {}

type AdminUsersUpdateBadRequest ProblemDetails

func (*AdminUsersUpdateBadRequest) adminUsersUpdateRes() {}

type AdminUsersUpdateNotFound ProblemDetails

func (*AdminUsersUpdateNotFound) adminUsersUpdateRes() {}

// Serializer for representing the currently authenticated user.
// Ref: #/components/schemas/CurrentUser
type CurrentUser struct {
	ID int `json:"id"`
	// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string    `json:"username"`
	Email    OptString `json:"email"`
}

// GetID returns the value of ID.
func (s *CurrentUser) GetID() int {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *CurrentUser) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *CurrentUser) GetEmail() OptString {
	return s.Email
}

// SetID sets the value of ID.
func (s *CurrentUser) SetID(val int) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *CurrentUser) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *CurrentUser) SetEmail(val OptString) {
	s.Email = val
}

func (*CurrentUser) meRetrieveRes() {}

type EmailString string

type FacilitiesCreateBadRequest ProblemDetails

func (*FacilitiesCreateBadRequest) facilitiesCreateRes() {}

type FacilitiesCreateForbidden ProblemDetails

func (*FacilitiesCreateForbidden) facilitiesCreateRes() {}

type FacilitiesDestroyBadRequest ProblemDetails

func (*FacilitiesDestroyBadRequest) facilitiesDestroyRes() {}

// FacilitiesDestroyNoContent is response for FacilitiesDestroy operation.
type FacilitiesDestroyNoContent struct{}

func (*FacilitiesDestroyNoContent) facilitiesDestroyRes() {}

type FacilitiesDestroyNotFound ProblemDetails

func (*FacilitiesDestroyNotFound) facilitiesDestroyRes() {}

type FacilitiesPartialUpdateBadRequest ProblemDetails

func (*FacilitiesPartialUpdateBadRequest) facilitiesPartialUpdateRes() {}

type FacilitiesPartialUpdateNotFound ProblemDetails

func (*FacilitiesPartialUpdateNotFound) facilitiesPartialUpdateRes() {}

type FacilitiesUpdateBadRequest ProblemDetails

func (*FacilitiesUpdateBadRequest) facilitiesUpdateRes() {}

type FacilitiesUpdateNotFound ProblemDetails

func (*FacilitiesUpdateNotFound) facilitiesUpdateRes() {}

// NewOptAdminUserMergePatchUpdateEmail returns new OptAdminUserMergePatchUpdateEmail with value set to v.
func NewOptAdminUserMergePatchUpdateEmail(v AdminUserMergePatchUpdateEmail) OptAdminUserMergePatchUpdateEmail {
	return OptAdminUserMergePatchUpdateEmail{
		Value: v,
		Set:   true,
	}
}

// OptAdminUserMergePatchUpdateEmail is optional AdminUserMergePatchUpdateEmail.
type OptAdminUserMergePatchUpdateEmail struct {
	Value AdminUserMergePatchUpdateEmail
	Set   bool
}

// IsSet returns true if OptAdminUserMergePatchUpdateEmail was set.
func (o OptAdminUserMergePatchUpdateEmail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAdminUserMergePatchUpdateEmail) Reset() {
	var v AdminUserMergePatchUpdateEmail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAdminUserMergePatchUpdateEmail) SetTo(v AdminUserMergePatchUpdateEmail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAdminUserMergePatchUpdateEmail) Get() (v AdminUserMergePatchUpdateEmail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAdminUserMergePatchUpdateEmail) Or(d AdminUserMergePatchUpdateEmail) AdminUserMergePatchUpdateEmail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAdminUserMergePatchUpdateIsStaff returns new OptAdminUserMergePatchUpdateIsStaff with value set to v.
func NewOptAdminUserMergePatchUpdateIsStaff(v AdminUserMergePatchUpdateIsStaff) OptAdminUserMergePatchUpdateIsStaff {
	return OptAdminUserMergePatchUpdateIsStaff{
		Value: v,
		Set:   true,
	}
}

// OptAdminUserMergePatchUpdateIsStaff is optional AdminUserMergePatchUpdateIsStaff.
type OptAdminUserMergePatchUpdateIsStaff struct {
	Value AdminUserMergePatchUpdateIsStaff
	Set   bool
}

// IsSet returns true if OptAdminUserMergePatchUpdateIsStaff was set.
func (o OptAdminUserMergePatchUpdateIsStaff) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAdminUserMergePatchUpdateIsStaff) Reset() {
	var v AdminUserMergePatchUpdateIsStaff
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAdminUserMergePatchUpdateIsStaff) SetTo(v AdminUserMergePatchUpdateIsStaff) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAdminUserMergePatchUpdateIsStaff) Get() (v AdminUserMergePatchUpdateIsStaff, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAdminUserMergePatchUpdateIsStaff) Or(d AdminUserMergePatchUpdateIsStaff) AdminUserMergePatchUpdateIsStaff {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEmailString returns new OptEmailString with value set to v.
func NewOptEmailString(v EmailString) OptEmailString {
	return OptEmailString{
		Value: v,
		Set:   true,
	}
}

// OptEmailString is optional EmailString.
type OptEmailString struct {
	Value EmailString
	Set   bool
}

// IsSet returns true if OptEmailString was set.
func (o OptEmailString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEmailString) Reset() {
	var v EmailString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEmailString) SetTo(v EmailString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEmailString) Get() (v EmailString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEmailString) Or(d EmailString) EmailString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicFacilityMergePatchUpdateDescription returns new OptPublicFacilityMergePatchUpdateDescription with value set to v.
func NewOptPublicFacilityMergePatchUpdateDescription(v PublicFacilityMergePatchUpdateDescription) OptPublicFacilityMergePatchUpdateDescription {
	return OptPublicFacilityMergePatchUpdateDescription{
		Value: v,
		Set:   true,
	}
}

// OptPublicFacilityMergePatchUpdateDescription is optional PublicFacilityMergePatchUpdateDescription.
type OptPublicFacilityMergePatchUpdateDescription struct {
	Value PublicFacilityMergePatchUpdateDescription
	Set   bool
}

// IsSet returns true if OptPublicFacilityMergePatchUpdateDescription was set.
func (o OptPublicFacilityMergePatchUpdateDescription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicFacilityMergePatchUpdateDescription) Reset() {
	var v PublicFacilityMergePatchUpdateDescription
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicFacilityMergePatchUpdateDescription) SetTo(v PublicFacilityMergePatchUpdateDescription) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicFacilityMergePatchUpdateDescription) Get() (v PublicFacilityMergePatchUpdateDescription, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicFacilityMergePatchUpdateDescription) Or(d PublicFacilityMergePatchUpdateDescription) PublicFacilityMergePatchUpdateDescription {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicFacilityMergePatchUpdateIsActive returns new OptPublicFacilityMergePatchUpdateIsActive with value set to v.
func NewOptPublicFacilityMergePatchUpdateIsActive(v PublicFacilityMergePatchUpdateIsActive) OptPublicFacilityMergePatchUpdateIsActive {
	return OptPublicFacilityMergePatchUpdateIsActive{
		Value: v,
		Set:   true,
	}
}

// OptPublicFacilityMergePatchUpdateIsActive is optional PublicFacilityMergePatchUpdateIsActive.
type OptPublicFacilityMergePatchUpdateIsActive struct {
	Value PublicFacilityMergePatchUpdateIsActive
	Set   bool
}

// IsSet returns true if OptPublicFacilityMergePatchUpdateIsActive was set.
func (o OptPublicFacilityMergePatchUpdateIsActive) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicFacilityMergePatchUpdateIsActive) Reset() {
	var v PublicFacilityMergePatchUpdateIsActive
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicFacilityMergePatchUpdateIsActive) SetTo(v PublicFacilityMergePatchUpdateIsActive) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicFacilityMergePatchUpdateIsActive) Get() (v PublicFacilityMergePatchUpdateIsActive, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicFacilityMergePatchUpdateIsActive) Or(d PublicFacilityMergePatchUpdateIsActive) PublicFacilityMergePatchUpdateIsActive {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicFacilityMergePatchUpdateLocation returns new OptPublicFacilityMergePatchUpdateLocation with value set to v.
func NewOptPublicFacilityMergePatchUpdateLocation(v PublicFacilityMergePatchUpdateLocation) OptPublicFacilityMergePatchUpdateLocation {
	return OptPublicFacilityMergePatchUpdateLocation{
		Value: v,
		Set:   true,
	}
}

// OptPublicFacilityMergePatchUpdateLocation is optional PublicFacilityMergePatchUpdateLocation.
type OptPublicFacilityMergePatchUpdateLocation struct {
	Value PublicFacilityMergePatchUpdateLocation
	Set   bool
}

// IsSet returns true if OptPublicFacilityMergePatchUpdateLocation was set.
func (o OptPublicFacilityMergePatchUpdateLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicFacilityMergePatchUpdateLocation) Reset() {
	var v PublicFacilityMergePatchUpdateLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicFacilityMergePatchUpdateLocation) SetTo(v PublicFacilityMergePatchUpdateLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicFacilityMergePatchUpdateLocation) Get() (v PublicFacilityMergePatchUpdateLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicFacilityMergePatchUpdateLocation) Or(d PublicFacilityMergePatchUpdateLocation) PublicFacilityMergePatchUpdateLocation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicFacilityMergePatchUpdatePriority returns new OptPublicFacilityMergePatchUpdatePriority with value set to v.
func NewOptPublicFacilityMergePatchUpdatePriority(v PublicFacilityMergePatchUpdatePriority) OptPublicFacilityMergePatchUpdatePriority {
	return OptPublicFacilityMergePatchUpdatePriority{
		Value: v,
		Set:   true,
	}
}

// OptPublicFacilityMergePatchUpdatePriority is optional PublicFacilityMergePatchUpdatePriority.
type OptPublicFacilityMergePatchUpdatePriority struct {
	Value PublicFacilityMergePatchUpdatePriority
	Set   bool
}

// IsSet returns true if OptPublicFacilityMergePatchUpdatePriority was set.
func (o OptPublicFacilityMergePatchUpdatePriority) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicFacilityMergePatchUpdatePriority) Reset() {
	var v PublicFacilityMergePatchUpdatePriority
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicFacilityMergePatchUpdatePriority) SetTo(v PublicFacilityMergePatchUpdatePriority) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicFacilityMergePatchUpdatePriority) Get() (v PublicFacilityMergePatchUpdatePriority, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicFacilityMergePatchUpdatePriority) Or(d PublicFacilityMergePatchUpdatePriority) PublicFacilityMergePatchUpdatePriority {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ProblemDetails
type ProblemDetails struct {
	// A URI reference [RFC3986] that identifies the problem type.
	Type OptString `json:"type"`
	// A short, human-readable summary of the problem type.
	Title OptString `json:"title"`
	// The HTTP status code for this occurrence of the problem.
	Status OptInt `json:"status"`
	// A human-readable explanation specific to this occurrence of the problem.
	Detail OptString `json:"detail"`
	// A URI reference that identifies the specific occurrence of the problem.
	Instance OptString `json:"instance"`
}

// GetType returns the value of Type.
func (s *ProblemDetails) GetType() OptString {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *ProblemDetails) GetTitle() OptString {
	return s.Title
}

// GetStatus returns the value of Status.
func (s *ProblemDetails) GetStatus() OptInt {
	return s.Status
}

// GetDetail returns the value of Detail.
func (s *ProblemDetails) GetDetail() OptString {
	return s.Detail
}

// GetInstance returns the value of Instance.
func (s *ProblemDetails) GetInstance() OptString {
	return s.Instance
}

// SetType sets the value of Type.
func (s *ProblemDetails) SetType(val OptString) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *ProblemDetails) SetTitle(val OptString) {
	s.Title = val
}

// SetStatus sets the value of Status.
func (s *ProblemDetails) SetStatus(val OptInt) {
	s.Status = val
}

// SetDetail sets the value of Detail.
func (s *ProblemDetails) SetDetail(val OptString) {
	s.Detail = val
}

// SetInstance sets the value of Instance.
func (s *ProblemDetails) SetInstance(val OptString) {
	s.Instance = val
}

func (*ProblemDetails) facilitiesRetrieveRes() {}
func (*ProblemDetails) meRetrieveRes()         {}

// Ref: #/components/schemas/PublicFacility
type PublicFacility struct {
	ID int `json:"id"`
	// Display name of the facility. Visible to users.
	Name string `json:"name"`
	// Optional description of the facility, including usage rules or details.
	Description OptString `json:"description"`
	// Physical location or address of the facility.
	Location OptString `json:"location"`
	// Display priority. Lower numbers appear earlier in sorted lists.
	Priority OptInt64 `json:"priority"`
	// Set to false to disable this facility from public listing or reservation.
	IsActive  OptBool     `json:"is_active"`
	CreatedAt OptDateTime `json:"created_at"`
	UpdatedAt OptDateTime `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *PublicFacility) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *PublicFacility) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *PublicFacility) GetDescription() OptString {
	return s.Description
}

// GetLocation returns the value of Location.
func (s *PublicFacility) GetLocation() OptString {
	return s.Location
}

// GetPriority returns the value of Priority.
func (s *PublicFacility) GetPriority() OptInt64 {
	return s.Priority
}

// GetIsActive returns the value of IsActive.
func (s *PublicFacility) GetIsActive() OptBool {
	return s.IsActive
}

// GetCreatedAt returns the value of CreatedAt.
func (s *PublicFacility) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *PublicFacility) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *PublicFacility) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PublicFacility) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *PublicFacility) SetDescription(val OptString) {
	s.Description = val
}

// SetLocation sets the value of Location.
func (s *PublicFacility) SetLocation(val OptString) {
	s.Location = val
}

// SetPriority sets the value of Priority.
func (s *PublicFacility) SetPriority(val OptInt64) {
	s.Priority = val
}

// SetIsActive sets the value of IsActive.
func (s *PublicFacility) SetIsActive(val OptBool) {
	s.IsActive = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *PublicFacility) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *PublicFacility) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

func (*PublicFacility) facilitiesCreateRes()        {}
func (*PublicFacility) facilitiesPartialUpdateRes() {}
func (*PublicFacility) facilitiesRetrieveRes()      {}
func (*PublicFacility) facilitiesUpdateRes()        {}

// Ref: #/components/schemas/PublicFacilityMergePatchUpdate
type PublicFacilityMergePatchUpdate struct {
	// Display name of the facility. Visible to users.
	Name OptString `json:"name"`
	// Optional description of the facility, including usage rules or details.
	Description OptPublicFacilityMergePatchUpdateDescription `json:"description"`
	// Physical location or address of the facility.
	Location OptPublicFacilityMergePatchUpdateLocation `json:"location"`
	// Display priority. Lower numbers appear earlier in sorted lists.
	Priority OptPublicFacilityMergePatchUpdatePriority `json:"priority"`
	// Set to false to disable this facility from public listing or reservation.
	IsActive OptPublicFacilityMergePatchUpdateIsActive `json:"is_active"`
}

// GetName returns the value of Name.
func (s *PublicFacilityMergePatchUpdate) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *PublicFacilityMergePatchUpdate) GetDescription() OptPublicFacilityMergePatchUpdateDescription {
	return s.Description
}

// GetLocation returns the value of Location.
func (s *PublicFacilityMergePatchUpdate) GetLocation() OptPublicFacilityMergePatchUpdateLocation {
	return s.Location
}

// GetPriority returns the value of Priority.
func (s *PublicFacilityMergePatchUpdate) GetPriority() OptPublicFacilityMergePatchUpdatePriority {
	return s.Priority
}

// GetIsActive returns the value of IsActive.
func (s *PublicFacilityMergePatchUpdate) GetIsActive() OptPublicFacilityMergePatchUpdateIsActive {
	return s.IsActive
}

// SetName sets the value of Name.
func (s *PublicFacilityMergePatchUpdate) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *PublicFacilityMergePatchUpdate) SetDescription(val OptPublicFacilityMergePatchUpdateDescription) {
	s.Description = val
}

// SetLocation sets the value of Location.
func (s *PublicFacilityMergePatchUpdate) SetLocation(val OptPublicFacilityMergePatchUpdateLocation) {
	s.Location = val
}

// SetPriority sets the value of Priority.
func (s *PublicFacilityMergePatchUpdate) SetPriority(val OptPublicFacilityMergePatchUpdatePriority) {
	s.Priority = val
}

// SetIsActive sets the value of IsActive.
func (s *PublicFacilityMergePatchUpdate) SetIsActive(val OptPublicFacilityMergePatchUpdateIsActive) {
	s.IsActive = val
}

// Optional description of the facility, including usage rules or details.
// PublicFacilityMergePatchUpdateDescription represents sum type.
type PublicFacilityMergePatchUpdateDescription struct {
	Type   PublicFacilityMergePatchUpdateDescriptionType // switch on this field
	String string
	Null   struct{}
}

// PublicFacilityMergePatchUpdateDescriptionType is oneOf type of PublicFacilityMergePatchUpdateDescription.
type PublicFacilityMergePatchUpdateDescriptionType string

// Possible values for PublicFacilityMergePatchUpdateDescriptionType.
const (
	StringPublicFacilityMergePatchUpdateDescription PublicFacilityMergePatchUpdateDescriptionType = "string"
	NullPublicFacilityMergePatchUpdateDescription   PublicFacilityMergePatchUpdateDescriptionType = "struct{}"
)

// IsString reports whether PublicFacilityMergePatchUpdateDescription is string.
func (s PublicFacilityMergePatchUpdateDescription) IsString() bool {
	return s.Type == StringPublicFacilityMergePatchUpdateDescription
}

// IsNull reports whether PublicFacilityMergePatchUpdateDescription is struct{}.
func (s PublicFacilityMergePatchUpdateDescription) IsNull() bool {
	return s.Type == NullPublicFacilityMergePatchUpdateDescription
}

// SetString sets PublicFacilityMergePatchUpdateDescription to string.
func (s *PublicFacilityMergePatchUpdateDescription) SetString(v string) {
	s.Type = StringPublicFacilityMergePatchUpdateDescription
	s.String = v
}

// GetString returns string and true boolean if PublicFacilityMergePatchUpdateDescription is string.
func (s PublicFacilityMergePatchUpdateDescription) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringPublicFacilityMergePatchUpdateDescription returns new PublicFacilityMergePatchUpdateDescription from string.
func NewStringPublicFacilityMergePatchUpdateDescription(v string) PublicFacilityMergePatchUpdateDescription {
	var s PublicFacilityMergePatchUpdateDescription
	s.SetString(v)
	return s
}

// SetNull sets PublicFacilityMergePatchUpdateDescription to struct{}.
func (s *PublicFacilityMergePatchUpdateDescription) SetNull(v struct{}) {
	s.Type = NullPublicFacilityMergePatchUpdateDescription
	s.Null = v
}

// GetNull returns struct{} and true boolean if PublicFacilityMergePatchUpdateDescription is struct{}.
func (s PublicFacilityMergePatchUpdateDescription) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullPublicFacilityMergePatchUpdateDescription returns new PublicFacilityMergePatchUpdateDescription from struct{}.
func NewNullPublicFacilityMergePatchUpdateDescription(v struct{}) PublicFacilityMergePatchUpdateDescription {
	var s PublicFacilityMergePatchUpdateDescription
	s.SetNull(v)
	return s
}

// Set to false to disable this facility from public listing or reservation.
// PublicFacilityMergePatchUpdateIsActive represents sum type.
type PublicFacilityMergePatchUpdateIsActive struct {
	Type PublicFacilityMergePatchUpdateIsActiveType // switch on this field
	Bool bool
	Null struct{}
}

// PublicFacilityMergePatchUpdateIsActiveType is oneOf type of PublicFacilityMergePatchUpdateIsActive.
type PublicFacilityMergePatchUpdateIsActiveType string

// Possible values for PublicFacilityMergePatchUpdateIsActiveType.
const (
	BoolPublicFacilityMergePatchUpdateIsActive PublicFacilityMergePatchUpdateIsActiveType = "bool"
	NullPublicFacilityMergePatchUpdateIsActive PublicFacilityMergePatchUpdateIsActiveType = "struct{}"
)

// IsBool reports whether PublicFacilityMergePatchUpdateIsActive is bool.
func (s PublicFacilityMergePatchUpdateIsActive) IsBool() bool {
	return s.Type == BoolPublicFacilityMergePatchUpdateIsActive
}

// IsNull reports whether PublicFacilityMergePatchUpdateIsActive is struct{}.
func (s PublicFacilityMergePatchUpdateIsActive) IsNull() bool {
	return s.Type == NullPublicFacilityMergePatchUpdateIsActive
}

// SetBool sets PublicFacilityMergePatchUpdateIsActive to bool.
func (s *PublicFacilityMergePatchUpdateIsActive) SetBool(v bool) {
	s.Type = BoolPublicFacilityMergePatchUpdateIsActive
	s.Bool = v
}

// GetBool returns bool and true boolean if PublicFacilityMergePatchUpdateIsActive is bool.
func (s PublicFacilityMergePatchUpdateIsActive) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolPublicFacilityMergePatchUpdateIsActive returns new PublicFacilityMergePatchUpdateIsActive from bool.
func NewBoolPublicFacilityMergePatchUpdateIsActive(v bool) PublicFacilityMergePatchUpdateIsActive {
	var s PublicFacilityMergePatchUpdateIsActive
	s.SetBool(v)
	return s
}

// SetNull sets PublicFacilityMergePatchUpdateIsActive to struct{}.
func (s *PublicFacilityMergePatchUpdateIsActive) SetNull(v struct{}) {
	s.Type = NullPublicFacilityMergePatchUpdateIsActive
	s.Null = v
}

// GetNull returns struct{} and true boolean if PublicFacilityMergePatchUpdateIsActive is struct{}.
func (s PublicFacilityMergePatchUpdateIsActive) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullPublicFacilityMergePatchUpdateIsActive returns new PublicFacilityMergePatchUpdateIsActive from struct{}.
func NewNullPublicFacilityMergePatchUpdateIsActive(v struct{}) PublicFacilityMergePatchUpdateIsActive {
	var s PublicFacilityMergePatchUpdateIsActive
	s.SetNull(v)
	return s
}

// Physical location or address of the facility.
// PublicFacilityMergePatchUpdateLocation represents sum type.
type PublicFacilityMergePatchUpdateLocation struct {
	Type   PublicFacilityMergePatchUpdateLocationType // switch on this field
	String string
	Null   struct{}
}

// PublicFacilityMergePatchUpdateLocationType is oneOf type of PublicFacilityMergePatchUpdateLocation.
type PublicFacilityMergePatchUpdateLocationType string

// Possible values for PublicFacilityMergePatchUpdateLocationType.
const (
	StringPublicFacilityMergePatchUpdateLocation PublicFacilityMergePatchUpdateLocationType = "string"
	NullPublicFacilityMergePatchUpdateLocation   PublicFacilityMergePatchUpdateLocationType = "struct{}"
)

// IsString reports whether PublicFacilityMergePatchUpdateLocation is string.
func (s PublicFacilityMergePatchUpdateLocation) IsString() bool {
	return s.Type == StringPublicFacilityMergePatchUpdateLocation
}

// IsNull reports whether PublicFacilityMergePatchUpdateLocation is struct{}.
func (s PublicFacilityMergePatchUpdateLocation) IsNull() bool {
	return s.Type == NullPublicFacilityMergePatchUpdateLocation
}

// SetString sets PublicFacilityMergePatchUpdateLocation to string.
func (s *PublicFacilityMergePatchUpdateLocation) SetString(v string) {
	s.Type = StringPublicFacilityMergePatchUpdateLocation
	s.String = v
}

// GetString returns string and true boolean if PublicFacilityMergePatchUpdateLocation is string.
func (s PublicFacilityMergePatchUpdateLocation) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringPublicFacilityMergePatchUpdateLocation returns new PublicFacilityMergePatchUpdateLocation from string.
func NewStringPublicFacilityMergePatchUpdateLocation(v string) PublicFacilityMergePatchUpdateLocation {
	var s PublicFacilityMergePatchUpdateLocation
	s.SetString(v)
	return s
}

// SetNull sets PublicFacilityMergePatchUpdateLocation to struct{}.
func (s *PublicFacilityMergePatchUpdateLocation) SetNull(v struct{}) {
	s.Type = NullPublicFacilityMergePatchUpdateLocation
	s.Null = v
}

// GetNull returns struct{} and true boolean if PublicFacilityMergePatchUpdateLocation is struct{}.
func (s PublicFacilityMergePatchUpdateLocation) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullPublicFacilityMergePatchUpdateLocation returns new PublicFacilityMergePatchUpdateLocation from struct{}.
func NewNullPublicFacilityMergePatchUpdateLocation(v struct{}) PublicFacilityMergePatchUpdateLocation {
	var s PublicFacilityMergePatchUpdateLocation
	s.SetNull(v)
	return s
}

// Display priority. Lower numbers appear earlier in sorted lists.
// PublicFacilityMergePatchUpdatePriority represents sum type.
type PublicFacilityMergePatchUpdatePriority struct {
	Type  PublicFacilityMergePatchUpdatePriorityType // switch on this field
	Int64 int64
	Null  struct{}
}

// PublicFacilityMergePatchUpdatePriorityType is oneOf type of PublicFacilityMergePatchUpdatePriority.
type PublicFacilityMergePatchUpdatePriorityType string

// Possible values for PublicFacilityMergePatchUpdatePriorityType.
const (
	Int64PublicFacilityMergePatchUpdatePriority PublicFacilityMergePatchUpdatePriorityType = "int64"
	NullPublicFacilityMergePatchUpdatePriority  PublicFacilityMergePatchUpdatePriorityType = "struct{}"
)

// IsInt64 reports whether PublicFacilityMergePatchUpdatePriority is int64.
func (s PublicFacilityMergePatchUpdatePriority) IsInt64() bool {
	return s.Type == Int64PublicFacilityMergePatchUpdatePriority
}

// IsNull reports whether PublicFacilityMergePatchUpdatePriority is struct{}.
func (s PublicFacilityMergePatchUpdatePriority) IsNull() bool {
	return s.Type == NullPublicFacilityMergePatchUpdatePriority
}

// SetInt64 sets PublicFacilityMergePatchUpdatePriority to int64.
func (s *PublicFacilityMergePatchUpdatePriority) SetInt64(v int64) {
	s.Type = Int64PublicFacilityMergePatchUpdatePriority
	s.Int64 = v
}

// GetInt64 returns int64 and true boolean if PublicFacilityMergePatchUpdatePriority is int64.
func (s PublicFacilityMergePatchUpdatePriority) GetInt64() (v int64, ok bool) {
	if !s.IsInt64() {
		return v, false
	}
	return s.Int64, true
}

// NewInt64PublicFacilityMergePatchUpdatePriority returns new PublicFacilityMergePatchUpdatePriority from int64.
func NewInt64PublicFacilityMergePatchUpdatePriority(v int64) PublicFacilityMergePatchUpdatePriority {
	var s PublicFacilityMergePatchUpdatePriority
	s.SetInt64(v)
	return s
}

// SetNull sets PublicFacilityMergePatchUpdatePriority to struct{}.
func (s *PublicFacilityMergePatchUpdatePriority) SetNull(v struct{}) {
	s.Type = NullPublicFacilityMergePatchUpdatePriority
	s.Null = v
}

// GetNull returns struct{} and true boolean if PublicFacilityMergePatchUpdatePriority is struct{}.
func (s PublicFacilityMergePatchUpdatePriority) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullPublicFacilityMergePatchUpdatePriority returns new PublicFacilityMergePatchUpdatePriority from struct{}.
func NewNullPublicFacilityMergePatchUpdatePriority(v struct{}) PublicFacilityMergePatchUpdatePriority {
	var s PublicFacilityMergePatchUpdatePriority
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/UnexpectedError
type UnexpectedError struct {
	Code    UnexpectedErrorCode `json:"code"`
	Message string              `json:"message"`
}

// GetCode returns the value of Code.
func (s *UnexpectedError) GetCode() UnexpectedErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *UnexpectedError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *UnexpectedError) SetCode(val UnexpectedErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *UnexpectedError) SetMessage(val string) {
	s.Message = val
}

type UnexpectedErrorCode string

const (
	UnexpectedErrorCodeINTERNALSERVERERROR UnexpectedErrorCode = "INTERNAL_SERVER_ERROR"
)

// AllValues returns all UnexpectedErrorCode values.
func (UnexpectedErrorCode) AllValues() []UnexpectedErrorCode {
	return []UnexpectedErrorCode{
		UnexpectedErrorCodeINTERNALSERVERERROR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UnexpectedErrorCode) MarshalText() ([]byte, error) {
	switch s {
	case UnexpectedErrorCodeINTERNALSERVERERROR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UnexpectedErrorCode) UnmarshalText(data []byte) error {
	switch UnexpectedErrorCode(data) {
	case UnexpectedErrorCodeINTERNALSERVERERROR:
		*s = UnexpectedErrorCodeINTERNALSERVERERROR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UnexpectedErrorStatusCode wraps UnexpectedError with StatusCode.
type UnexpectedErrorStatusCode struct {
	StatusCode int
	Response   UnexpectedError
}

// GetStatusCode returns the value of StatusCode.
func (s *UnexpectedErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *UnexpectedErrorStatusCode) GetResponse() UnexpectedError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *UnexpectedErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *UnexpectedErrorStatusCode) SetResponse(val UnexpectedError) {
	s.Response = val
}
